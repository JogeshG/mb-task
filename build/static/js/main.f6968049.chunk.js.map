{"version":3,"sources":["Userlist.js","Adduserbutton.js","NewuserInfo.js","Updateuserinfo.js","App.js","serviceWorker.js","index.js"],"names":["Userlist","props","deleteUser","userInfo","updateDetails","userDetails","userToUpdate","toggleupdateModal","users","this","userlist","map","user","className","Card","key","id","Header","name","onClick","aria-label","title","aria-hidden","Body","birthdate","gender","address","college","hobbies","toString","Component","Adduserbutton","toggleModal","React","NewuserInfo","nameRef","createRef","addressRef","genderRef","birthdateRef","collegeRef","hobbiesRef","formRef","onsubmituserData","bind","selectGender","selectHobbies","closeModal","state","collegeOptions","checkedValue","selectedHobbie","axios","get","then","res","setState","data","event","preventDefault","hobbie","console","log","document","querySelectorAll","forEach","checkbox","value","push","current","newUsrdata","lastuserIndex","submitNewData","reset","e","currentTarget","checked","item","hobbiesOptions","onChange","type","for","modalShow","role","ref","onSubmit","htmlFor","required","class","placeholder","updateModalShow","updateUserData","userData","disabled","App","deletId","updatedList","filter","it","initialusrDetails","modlShowprop","updatemodlShowprop","newUserArray","length","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f6968049.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nexport default class Userlist extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n   \r\n    //    console.log(props)\r\n  }\r\n  componentDidMount() {\r\n  \r\n    // console.log(this.props)\r\n  }\r\n\r\n  deleteUser = (userInfo) => {\r\n    this.props.deleteUser(userInfo);\r\n  };\r\n  updateDetails = (userDetails) => {\r\n    // console.log(userDetails)\r\n    this.props.userToUpdate(userDetails);\r\n    this.props.toggleupdateModal();\r\n  };\r\n  render() {\r\n    const ulist = this.props.userlist;//.reverse();\r\n//ulist.reverse();\r\n    const users = ulist.map((user) => {\r\n      return (\r\n        <div className=\"col-md-6 col-sm-12\">\r\n          <Card key={user.id}>\r\n            <Card.Header>\r\n              {\"# \"}\r\n              {user.name}\r\n              <i\r\n                onClick={() => this.deleteUser({ user })}\r\n                className=\"close\"\r\n                aria-label=\"Close\"\r\n                title=\"Delete User\"\r\n              >\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </i>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <p>Dob:{user.birthdate}</p>\r\n              <p>Gender:{user.gender}</p>\r\n              <p>Address:{user.address}</p>\r\n              <p>College:{user.college}</p>\r\n              <p>Hobbies:{user.hobbies.toString()}</p>\r\n              <footer>\r\n                <button\r\n                  className=\"btn btn-primary\"\r\n                  onClick={() => this.updateDetails(user)}\r\n                >\r\n                  Update\r\n                </button>\r\n              </footer>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      );\r\n    });\r\n    return <div className=\"row\">{users}</div>;\r\n  }\r\n}\r\n","import React from 'react';\r\nclass Adduserbutton extends React.Component\r\n{\r\n    render(){\r\n        return( <button className=\"btn btn-success\" onClick={this.props.toggleModal}>Add User</button>\r\n        )\r\n    }\r\n   \r\n\r\n}   \r\nexport default Adduserbutton;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nexport default class NewuserInfo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nameRef = React.createRef();\r\n    this.addressRef = React.createRef();\r\n    this.genderRef = React.createRef();\r\n    this.birthdateRef = React.createRef();\r\n    this.collegeRef = React.createRef();\r\n    this.hobbiesRef = React.createRef();\r\n    this.formRef=React.createRef();\r\n    this.onsubmituserData = this.onsubmituserData.bind(this);\r\n    this.selectGender = this.selectGender.bind(this);\r\n    this.selectHobbies = this.selectHobbies.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n    this.state = {\r\n      collegeOptions: [],\r\n      gender: \"Male\",\r\n      hobbies:[{name:\"Reading\",checkedValue:false},{name:\"Gaming\",checkedValue:false} ,{name:\"Traveling\",checkedValue:false}, {name:\"Drawing\",checkedValue:false},{name:\"Other\",checkedValue:false}],\r\n      selectedHobbie:false,\r\n      \r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"http://universities.hipolabs.com/search?country=india\")\r\n      .then((res) => {\r\n        // console.log(res.data)\r\n        this.setState({\r\n          collegeOptions: res.data,\r\n        });\r\n        // console.log(this.state.collegeOptions)\r\n      });\r\n  }\r\n\r\n  onsubmituserData(event) {  \r\n     event.preventDefault();\r\n    let hobbie=[];\r\n    console.log(this.state.selectedHobbie)\r\n    // newcode\r\n    const checkboxes = document.querySelectorAll('input[name=\"hobbie\"]:checked');\r\n    checkboxes.forEach((checkbox) => {\r\n      if(checkbox.value!=\"Other\")\r\n      {\r\n          hobbie.push(checkbox.value);\r\n      }\r\n    });\r\n    \r\n    /*new*/\r\n    if(this.state.selectedHobbie)\r\n    {\r\n        hobbie=[...hobbie,this.hobbiesRef.current.value];\r\n    }\r\n   \r\n    /*new end*/\r\n    const newUsrdata ={id:this.props.lastuserIndex+1,name:this.nameRef.current.value,address:this.addressRef.current.value,college:this.collegeRef.current.value,gender:this.state.gender,birthdate:this.birthdateRef.current.value,hobbies:hobbie}\r\n    this.props.toggleModal();\r\n    this.props.submitNewData(newUsrdata);\r\n\r\n    this.formRef.current.reset();\r\n    \r\n    this.setState({\r\n        selectedHobbie:false\r\n    })\r\n  }\r\n  selectGender(e) {\r\n    console.log(e.currentTarget.value);\r\n    this.setState({\r\n      gender: e.currentTarget.value,\r\n    });\r\n  }\r\n  \r\n  closeModal() {\r\n    this.props.toggleModal();\r\n  }\r\n  selectHobbies(e){\r\n    /*new */\r\n       if(e.currentTarget.value==\"Other\"){          \r\n           this.setState({\r\n               selectedHobbie:e.currentTarget.checked\r\n           })\r\n       }   \r\n   }\r\n  \r\n  render() {\r\n    const collegeOptions = this.state.collegeOptions.map((item, key) => {\r\n      return <option key={key}>{item.name}</option>;\r\n    });\r\n\r\n    /*new end*/\r\n    const hobbiesOptions=\r\n    this.state.hobbies.map((item,key)=>{\r\n        return(\r\n            <div className=\"form-check\">\r\n                <input className=\"form-check-input\" value={item.name} name=\"hobbie\" onChange={(e) => this.selectHobbies(e)} type=\"checkbox\" id={item.name+\"checkN\"} />\r\n                <label className=\"form-check-label\" for={item.name+\"checkN\"}>\r\n                    {item.name}\r\n                </label>\r\n                </div>\r\n            )\r\n    })   /*new end*/ \r\n    return (\r\n      <div\r\n        id=\"ModalLoginForm\"\r\n        className={this.props.modalShow ? \"modal showUodateModal\" : \"modal\"}\r\n      >\r\n        <div className=\"modal-dialog\" role=\"document\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h3 className=\"modal-title\">New User information</h3>\r\n              <i\r\n                type=\"button\"\r\n                onClick={this.closeModal}\r\n                className=\"close\"\r\n                aria-label=\"Close\"\r\n                title=\"Close\"\r\n              >\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </i>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <form ref={this.formRef} onSubmit={this.onsubmituserData}>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name\" className=\"control-label\">\r\n                    Name\r\n                  </label>\r\n                  <input\r\n                    id=\"name\"\r\n                    ref={this.nameRef}\r\n                    type=\"text\"\r\n                    className=\"form-control input-lg\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"address\" className=\"control-label\">\r\n                    Address\r\n                  </label>\r\n\r\n                  <input\r\n                    id=\"address\"\r\n                    ref={this.addressRef}\r\n                    type=\"text\"\r\n                    className=\"form-control input-lg\"\r\n                    name=\"email\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"college\">Select College:</label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    id=\"college\"\r\n                    ref={this.collegeRef}\r\n                    required\r\n                  >\r\n                    {collegeOptions}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Gender</label>\r\n                  <div className=\"radio\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        value=\"Male\"\r\n                        name=\"optradio\"\r\n                        onChange={this.selectGender}\r\n                        checked\r\n                      />\r\n                      Male\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"radio\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        value=\"Female\"\r\n                        onChange={this.selectGender}\r\n                        name=\"optradio\"\r\n                      />\r\n                      Female\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"birthdate\" className=\"control-label\">\r\n                    Birthdate\r\n                  </label>\r\n\r\n                  <input\r\n                    id=\"birthdate\"\r\n                    ref={this.birthdateRef}\r\n                    type=\"date\"\r\n                    className=\"form-control input-lg\"\r\n                    name=\"password_confirmation\"\r\n                    required\r\n                  />\r\n                </div>\r\n\r\n                { /*new */}\r\n                    <div class=\"form-group\">\r\n                    <label htmlFor=\"hobbies\">Select Hobbies:</label>\r\n                       {hobbiesOptions}\r\n                         {this.state.selectedHobbie?<input placeholder=\"Enter your Hobbies\" className=\"form-control input-lg\" ref={this.hobbiesRef} type=\"text\" required />:null}\r\n                    </div>\r\n                {/* /*new end*/ }\r\n\r\n                  \r\n                <div className=\"form-group\">\r\n                  <div>\r\n                    <button type=\"submit\" className=\"btn btn-success\">\r\n                      Submit\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Select from \"react-select\";\r\n\r\nexport default class NewuserInfo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nameRef = React.createRef();\r\n    this.addressRef = React.createRef();\r\n    this.genderRef = React.createRef();\r\n    this.birthdateRef = React.createRef();\r\n    this.collegeRef = React.createRef();\r\n    this.hobbiesRef = React.createRef();\r\n    this.formRef=React.createRef();\r\n    this.onsubmituserData = this.onsubmituserData.bind(this);\r\n    this.selectGender = this.selectGender.bind(this);\r\n    this.selectHobbies = this.selectHobbies.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n    this.state = {\r\n      collegeOptions: [],\r\n      gender: \"Male\",\r\n      hobbies:[{name:\"Reading\",checkedValue:false},{name:\"Gaming\",checkedValue:false} ,{name:\"Traveling\",checkedValue:false}, {name:\"Drawing\",checkedValue:false},{name:\"Other\",checkedValue:false}],\r\n      selectedHobbie:false,\r\n    };\r\n    console.log(this.props.updateModalShow);\r\n  }\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"http://universities.hipolabs.com/search?country=india\")\r\n      .then((res) => {\r\n        // console.log(res.data)\r\n        this.setState({\r\n          collegeOptions: res.data,\r\n        });\r\n        // console.log(this.state.collegeOptions)\r\n      });\r\n  }\r\n\r\n  onsubmituserData(event) {\r\n    event.preventDefault();\r\n    let hobbie=[];\r\n     console.log(this.state.selectedHobbie)\r\n     // newcode\r\n     const checkboxes = document.querySelectorAll('input[name=\"hobbie\"]:checked');\r\n     checkboxes.forEach((checkbox) => {\r\n      if(checkbox.value!=\"Other\")\r\n      {\r\n          hobbie.push(checkbox.value);\r\n      }\r\n         \r\n     });\r\n     \r\n     /*new*/\r\n     if(this.state.selectedHobbie)\r\n     {\r\n         hobbie=[...hobbie,this.hobbiesRef.current.value];\r\n     }\r\n    \r\n     /*new end*/\r\n\r\n    const newUsrdata = {\r\n      name: this.nameRef.current.value,\r\n      address: this.addressRef.current.value,\r\n      college: this.collegeRef.current.value,\r\n      gender: this.state.gender,\r\n      birthdate: this.birthdateRef.current.value,\r\n      hobbies: hobbie,\r\n    };\r\n\r\n    event.preventDefault();\r\n    this.props.toggleModal();\r\n    this.props.updateUserData(newUsrdata, this.props.userData.id);\r\n   this.formRef.current.reset();\r\n  }\r\n  selectGender(e) {\r\n    this.setState({\r\n      gender: e.currentTarget.value,\r\n    });\r\n  }\r\n  selectHobbies(e){\r\n    /*new */\r\n       if(e.currentTarget.value==\"Other\"){          \r\n           this.setState({\r\n               selectedHobbie:e.currentTarget.checked\r\n           })\r\n       }   \r\n   }\r\n  closeModal() {\r\n    this.props.toggleModal();\r\n  }\r\n  render() {\r\n    console.log(\"udpate\");\r\n    console.log(this.props);\r\n\r\n    const collegeOptions = this.state.collegeOptions.map((item, key) => {\r\n      return <option key={key}>{item.name}</option>;\r\n    });\r\n\r\n     /*new end*/\r\n     const hobbiesOptions=\r\n     this.state.hobbies.map((item,key)=>{\r\n         return(\r\n             <div className=\"form-check\">\r\n                 <input className=\"form-check-input\" value={item.name} name=\"hobbie\" onChange={(e) => this.selectHobbies(e)} type=\"checkbox\" id={item.name+\"check\"} />\r\n                 <label className=\"form-check-label\" for={item.name+\"check\"}>\r\n                     {item.name}\r\n                 </label>\r\n                 </div>\r\n             )\r\n     })   /*new end*/ \r\n    return (\r\n      <div\r\n        id=\"ModalLoginForm\"\r\n        className={\r\n          this.props.updateModalShow ? \"modal showUodateModal\" : \"modal\"\r\n        }\r\n      >\r\n        <div className=\"modal-dialog\" role=\"document\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h3 className=\"modal-title\">Update User information</h3>\r\n              <i\r\n                type=\"button\"\r\n                onClick={this.closeModal}\r\n                className=\"close\"\r\n                aria-label=\"Close\"\r\n                title=\"Close\"\r\n              >\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </i>\r\n            </div>\r\n           \r\n            <div className=\"modal-body\">\r\n              <form ref={this.formRef} onSubmit={this.onsubmituserData}>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name\" className=\"control-label\">\r\n                    Name\r\n                  </label>\r\n                  <input\r\n                    id=\"name\"\r\n                    ref={this.nameRef}\r\n                    type=\"text\"\r\n                    className=\"form-control input-lg\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"address\" className=\"control-label\">\r\n                    Address\r\n                  </label>\r\n\r\n                  <input\r\n                    id=\"address\"\r\n                    ref={this.addressRef}\r\n                    type=\"text\"\r\n                    className=\"form-control input-lg\"\r\n                    name=\"email\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"college\">Select College:</label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    id=\"college\"\r\n                    ref={this.collegeRef}\r\n                  >\r\n                    {collegeOptions}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Gender</label>\r\n                  <div className=\"radio\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        value=\"Male\"\r\n                        name=\"optradio\"\r\n                        onChange={this.selectGender}\r\n                        checked\r\n                      />\r\n                      Male\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"radio\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        value=\"Female\"\r\n                        onChange={this.selectGender}\r\n                        name=\"optradio\"\r\n                      />\r\n                      Female\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"birthdate\" className=\"control-label\">\r\n                    Birthdate\r\n                  </label>\r\n\r\n                  <input\r\n                    id=\"birthdate\"\r\n                    ref={this.birthdateRef}\r\n                    type=\"date\"\r\n                    className=\"form-control input-lg\"\r\n                    name=\"password_confirmation\"\r\n                    required\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"userid\" className=\"control-label\">\r\n                    User Id\r\n                  </label>\r\n\r\n                  <input\r\n                    id=\"userid\"\r\n                    value={this.props.userData.id}\r\n                    type=\"text\"\r\n                    className=\"form-control input-lg\"\r\n                    name=\"password_confirmation\"\r\n                    disabled\r\n                  />\r\n                </div>\r\n\r\n                { /*new */}\r\n                    <div class=\"form-group\">\r\n                    <label htmlFor=\"hobbies\">Select Hobbies:</label>\r\n                       {hobbiesOptions}\r\n                         {this.state.selectedHobbie?<input placeholder=\"Enter your Hobbies\" className=\"form-control input-lg\" ref={this.hobbiesRef} type=\"text\" required />:null}\r\n                    </div>\r\n                {/* /*new end*/ }\r\n\r\n                <div className=\"form-group\">\r\n                  <div>\r\n                    <button type=\"submit\" className=\"btn btn-success\">\r\n                      Update\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Userlist from \"./Userlist\";\nimport Adduserbutton from \"./Adduserbutton\";\nimport NewuserInfo from \"./NewuserInfo\";\nimport Updateuserinfo from \"./Updateuserinfo\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      userlist: [\n        {\n          id: 1,\n          name: \"Jogesh\",\n          birthdate: \"14-05-1993\",\n          address: \"Pune\",\n          gender: \"Male\",\n          college: \"TKIET\",\n          hobbies: \"Reading, Gaming, Traveling, Drawing\",\n        },\n        {\n          id: 2,\n          name: \"Ramesh\",\n          birthdate: \"14-05-1993\",\n          address: \"Solapur\",\n          gender: \"Male\",\n          college: \"RIT\",\n          hobbies: \"Cricket\",\n        },\n        {\n          id: 3,\n          name: \"Suresh\",\n          birthdate: \"14-05-1993\",\n          address: \"Satara\",\n          gender: \"Male\",\n          college: \"MIT\",\n          hobbies: \"Reading, Gaming, Traveling, Drawing\",\n        },\n        {\n          id: 4,\n          name: \"Shailesh\",\n          birthdate: \"14-05-1993\",\n          address: \"Mahi\",\n          gender: \"Male\",\n          college: \"COEP\",\n          hobbies: \"Cricket\",\n        },\n      ],\n      initialusrDetails: {\n        id: 1,\n        name: \"Jogesh\",\n        birthdate: \"14/05/1993\",\n        address: \"Pune\",\n        gender: \"Male\",\n        college: \"RIT\",\n        hobbies: \"Cricket\",\n      },\n      modalShow: false,\n      updateModalShow: false,\n      userData: {\n        id: 1,\n        name: \"Jogesh\",\n        birthdate: \"14/05/1993\",\n        address: \"Pune\",\n        gender: \"Male\",\n        college: \"RIT\",\n        hobbies: \"Cricket\",\n      },\n    };\n\n    this.deleteUser = this.deleteUser.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.toggleupdateModal = this.toggleupdateModal.bind(this);\n    this.submitNewData = this.submitNewData.bind(this);\n    this.userToUpdate = this.userToUpdate.bind(this);\n    this.updateUserData = this.updateUserData.bind(this);\n  }\n\n  deleteUser = (userInfo) => {\n    let deletId = userInfo.user.id;\n    let usersList = this.state.userlist;\n\n    const updatedList = usersList.filter((it) => it.id !== deletId);\n    //   updatedList.reverse();\n    this.setState({\n      userlist: updatedList,\n    });\n  };\n\n  toggleModal() {\n    const modlShowprop = this.state.modalShow;\n    // console.log(modlShowprop)\n    this.setState({\n      modalShow: !modlShowprop,\n    });\n  }\n  toggleupdateModal() {\n    // console.log(\"sucesssssss\")\n    const updatemodlShowprop = this.state.updateModalShow;\n    // console.log(modlShowprop)\n    this.setState({\n      updateModalShow: !updatemodlShowprop,\n    });\n  }\n  userToUpdate(userDetails) {\n    console.log(\"ssdasd\");\n    console.log(userDetails);\n    this.setState({\n      userData: userDetails,\n    });\n  }\n  submitNewData(newUsrdata) {\n    console.log(newUsrdata);\n    let newUserArray = [newUsrdata, ...this.state.userlist];\n    // console.log(newUserArray)\n    this.setState({\n      userlist: newUserArray,\n    });\n  }\n  updateUserData(newUsrdata, id) {\n    console.log(newUsrdata + \"++\" + id);\n    const userCurrentData = this.state.userlist;\n    userCurrentData.map((item) => {\n      if (item.id == id) {\n        item[\"name\"] = newUsrdata.name;\n        item[\"college\"] = newUsrdata.college;\n        item[\"address\"] = newUsrdata.address;\n        item[\"hobbies\"] = newUsrdata.hobbies;\n        item[\"gender\"] = newUsrdata.gender;\n        item[\"birthdate\"] = newUsrdata.birthdate;\n      }\n    });\n    let newUserArray = [...this.state.userlist, newUsrdata];\n    // console.log(newUserArray)\n    // this.setState({\n    //   userlist:newUserArray,\n\n    // })\n  }\n  render() {\n    return (\n      <>\n        <div className=\"container register\">\n          <div className=\"row\">\n            <div className=\"col-md-3 register-left\">\n              <i className=\"fa fa-laptop\" aria-hidden=\"true\"></i>\n\n              <h3>Welcome</h3>\n              <p>Mindbowser - Assignment Task !</p>\n              <Adduserbutton toggleModal={this.toggleModal} />\n            </div>\n            <div className=\"col-md-9 register-right\">\n              {/* <PopupExample/> */}\n              <div className=\"row \">\n                <h2 className=\"col-12 text-center\">User List</h2>\n              </div>\n            \n                <Updateuserinfo\n                  userlist={this.state.userlist}\n                  userData={this.state.userData}\n                  updateUserData={this.updateUserData}\n                  toggleModal={this.toggleupdateModal}\n                  updateModalShow={this.state.updateModalShow}\n                />\n\n                <Userlist\n                  toggleupdateModal={this.toggleupdateModal}\n                  updateModalShow={this.state.updateModalShow}\n                  userlist={this.state.userlist}\n                  deleteUser={this.deleteUser}\n                  userToUpdate={this.userToUpdate}\n                />\n             \n            </div>\n          </div>\n        </div>\n        <NewuserInfo\n          lastuserIndex={this.state.userlist.length}\n          submitNewData={this.submitNewData}\n          toggleModal={this.toggleModal}\n          modalShow={this.state.modalShow}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\n\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}